{
   "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
   "version": "2.1.0",
   "runs": [
      {
         "results": [
            {
               "message": {
                  "text": "BDSA-2021-2085"
               },
               "ruleId": "BDSA-2021-2085",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2083"
               },
               "ruleId": "BDSA-2021-2083",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-2577"
               },
               "ruleId": "BDSA-2020-2577",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2012-0078"
               },
               "ruleId": "BDSA-2012-0078",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1128"
               },
               "ruleId": "BDSA-2020-1128",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2018-1836"
               },
               "ruleId": "BDSA-2018-1836",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ant:ant-launcher:1.6.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ant:ant-launcher:1.6.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-1516"
               },
               "ruleId": "BDSA-2021-1516",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.bouncycastle:bcprov-jdk15on:1.56"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.bouncycastle:bcprov-jdk15on:1.56"
               }
            },
            {
               "message": {
                  "text": "BDSA-2018-5235"
               },
               "ruleId": "BDSA-2018-5235",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.bouncycastle:bcprov-jdk15on:1.56"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.bouncycastle:bcprov-jdk15on:1.56"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-3123"
               },
               "ruleId": "BDSA-2020-3123",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.bouncycastle:bcprov-jdk15on:1.56"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.bouncycastle:bcprov-jdk15on:1.56"
               }
            },
            {
               "message": {
                  "text": "BDSA-2018-1843"
               },
               "ruleId": "BDSA-2018-1843",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.bouncycastle:bcprov-jdk15on:1.56"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.bouncycastle:bcprov-jdk15on:1.56"
               }
            },
            {
               "message": {
                  "text": "BDSA-2017-2248"
               },
               "ruleId": "BDSA-2017-2248",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.bouncycastle:bcprov-jdk15on:1.56"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.bouncycastle:bcprov-jdk15on:1.56"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-4386"
               },
               "ruleId": "BDSA-2019-4386",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.dom4j:dom4j:2.1.1"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.dom4j:dom4j:2.1.1"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-3410"
               },
               "ruleId": "BDSA-2020-3410",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.hibernate:hibernate-core:5.4.6.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.hibernate:hibernate-core:5.4.6.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-4479"
               },
               "ruleId": "BDSA-2019-4479",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.hibernate:hibernate-core:5.4.6.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.hibernate:hibernate-core:5.4.6.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-4830"
               },
               "ruleId": "BDSA-2021-4830",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2768"
               },
               "ruleId": "BDSA-2022-2768",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2765"
               },
               "ruleId": "BDSA-2022-2765",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-4752"
               },
               "ruleId": "BDSA-2020-4752",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-2965"
               },
               "ruleId": "BDSA-2020-2965",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-4213"
               },
               "ruleId": "BDSA-2019-4213",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-3215"
               },
               "ruleId": "BDSA-2019-3215",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-3151"
               },
               "ruleId": "BDSA-2019-3151",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-3135"
               },
               "ruleId": "BDSA-2019-3135",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.fasterxml.jackson.core:jackson-databind:2.10.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.fasterxml.jackson.core:jackson-databind:2.10.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2110"
               },
               "ruleId": "BDSA-2021-2110",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.glassfish:jakarta.el:3.0.3"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.glassfish:jakarta.el:3.0.3"
               }
            },
            {
               "message": {
                  "text": "BDSA-2013-0080"
               },
               "ruleId": "BDSA-2013-0080",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///json/1.8.3"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "json/1.8.3"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3818"
               },
               "ruleId": "BDSA-2021-3818",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ch.qos.logback:logback-classic:1.2.3"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ch.qos.logback:logback-classic:1.2.3"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3401"
               },
               "ruleId": "BDSA-2021-3401",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///ch.qos.logback:logback-classic:1.2.3"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "ch.qos.logback:logback-classic:1.2.3"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3347"
               },
               "ruleId": "BDSA-2022-3347",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-41946"
               },
               "ruleId": "CVE-2022-41946",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2702"
               },
               "ruleId": "BDSA-2022-2702",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-31197"
               },
               "ruleId": "CVE-2022-31197",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2080"
               },
               "ruleId": "BDSA-2022-2080",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1285"
               },
               "ruleId": "BDSA-2022-1285",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-26520"
               },
               "ruleId": "CVE-2022-26520",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-21724"
               },
               "ruleId": "CVE-2022-21724",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1318"
               },
               "ruleId": "BDSA-2020-1318",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2020-13692"
               },
               "ruleId": "CVE-2020-13692",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2018-2984"
               },
               "ruleId": "BDSA-2018-2984",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2018-10936"
               },
               "ruleId": "CVE-2018-10936",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "CVE-2012-1618"
               },
               "ruleId": "CVE-2012-1618",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///PostgreSQL_JDBC_Driver_(pgjdbc)"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "PostgreSQL_JDBC_Driver_(pgjdbc)"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3347"
               },
               "ruleId": "BDSA-2022-3347",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2702"
               },
               "ruleId": "BDSA-2022-2702",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2080"
               },
               "ruleId": "BDSA-2022-2080",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1285"
               },
               "ruleId": "BDSA-2022-1285",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1318"
               },
               "ruleId": "BDSA-2020-1318",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2018-2984"
               },
               "ruleId": "BDSA-2018-2984",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.postgresql:postgresql:42.2.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.postgresql:postgresql:42.2.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-2776"
               },
               "ruleId": "BDSA-2019-2776",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///rake/10.4.2"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "rake/10.4.2"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2545"
               },
               "ruleId": "BDSA-2021-2545",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///rdoc/4.2.0"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "rdoc/4.2.0"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3447"
               },
               "ruleId": "BDSA-2022-3447",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3211"
               },
               "ruleId": "BDSA-2022-3211",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2590"
               },
               "ruleId": "BDSA-2022-2590",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2587"
               },
               "ruleId": "BDSA-2022-2587",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2579"
               },
               "ruleId": "BDSA-2022-2579",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2578"
               },
               "ruleId": "BDSA-2022-2578",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2577"
               },
               "ruleId": "BDSA-2022-2577",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2017-3947"
               },
               "ruleId": "BDSA-2017-3947",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.18"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.18"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3447"
               },
               "ruleId": "BDSA-2022-3447",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3211"
               },
               "ruleId": "BDSA-2022-3211",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2590"
               },
               "ruleId": "BDSA-2022-2590",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2587"
               },
               "ruleId": "BDSA-2022-2587",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2579"
               },
               "ruleId": "BDSA-2022-2579",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2578"
               },
               "ruleId": "BDSA-2022-2578",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2577"
               },
               "ruleId": "BDSA-2022-2577",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2017-3947"
               },
               "ruleId": "BDSA-2017-3947",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.yaml:snakeyaml:1.25"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.yaml:snakeyaml:1.25"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0856"
               },
               "ruleId": "BDSA-2022-0856",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.boot:spring-boot:2.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.boot:spring-boot:2.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0858"
               },
               "ruleId": "BDSA-2022-0858",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.boot:spring-boot:2.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.boot:spring-boot:2.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3887"
               },
               "ruleId": "BDSA-2021-3887",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.boot:spring-boot:2.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.boot:spring-boot:2.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3817"
               },
               "ruleId": "BDSA-2021-3817",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.boot:spring-boot:2.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.boot:spring-boot:2.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3731"
               },
               "ruleId": "BDSA-2021-3731",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.boot:spring-boot:2.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.boot:spring-boot:2.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2023-0638"
               },
               "ruleId": "BDSA-2023-0638",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1330"
               },
               "ruleId": "BDSA-2022-1330",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1329"
               },
               "ruleId": "BDSA-2022-1329",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1040"
               },
               "ruleId": "BDSA-2022-1040",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0858"
               },
               "ruleId": "BDSA-2022-0858",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0847"
               },
               "ruleId": "BDSA-2022-0847",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0820"
               },
               "ruleId": "BDSA-2022-0820",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0011"
               },
               "ruleId": "BDSA-2022-0011",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3236"
               },
               "ruleId": "BDSA-2021-3236",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-1588"
               },
               "ruleId": "BDSA-2021-1588",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "CVE-2020-5421"
               },
               "ruleId": "CVE-2020-5421",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-0070"
               },
               "ruleId": "BDSA-2020-0070",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-0069"
               },
               "ruleId": "BDSA-2020-0069",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "CVE-2016-1000027"
               },
               "ruleId": "CVE-2016-1000027",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework:spring-expression:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework:spring-expression:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3109"
               },
               "ruleId": "BDSA-2022-3109",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1369"
               },
               "ruleId": "BDSA-2022-1369",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-1370"
               },
               "ruleId": "BDSA-2022-1370",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2310"
               },
               "ruleId": "BDSA-2021-2310",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0417"
               },
               "ruleId": "BDSA-2021-0417",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1094"
               },
               "ruleId": "BDSA-2020-1094",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1092"
               },
               "ruleId": "BDSA-2020-1092",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.springframework.security:spring-security-core:5.2.0.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.springframework.security:spring-security-core:5.2.0.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-4619"
               },
               "ruleId": "BDSA-2021-4619",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-4041"
               },
               "ruleId": "BDSA-2022-4041",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2023-0526"
               },
               "ruleId": "BDSA-2023-0526",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2482"
               },
               "ruleId": "BDSA-2022-2482",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-1319"
               },
               "ruleId": "CVE-2022-1319",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2100"
               },
               "ruleId": "BDSA-2022-2100",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2085"
               },
               "ruleId": "BDSA-2022-2085",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0318"
               },
               "ruleId": "BDSA-2022-0318",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-3463"
               },
               "ruleId": "BDSA-2021-3463",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2789"
               },
               "ruleId": "BDSA-2021-2789",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2615"
               },
               "ruleId": "BDSA-2021-2615",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0444"
               },
               "ruleId": "BDSA-2021-0444",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0208"
               },
               "ruleId": "BDSA-2021-0208",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-2102"
               },
               "ruleId": "BDSA-2020-2102",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2019-4367"
               },
               "ruleId": "BDSA-2019-4367",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "CVE-2020-10719"
               },
               "ruleId": "CVE-2020-10719",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-1151"
               },
               "ruleId": "BDSA-2020-1151",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-0483"
               },
               "ruleId": "BDSA-2020-0483",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-0115"
               },
               "ruleId": "BDSA-2020-0115",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///io.undertow:undertow-core:2.0.27.Final"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "io.undertow:undertow-core:2.0.27.Final"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-3693"
               },
               "ruleId": "BDSA-2022-3693",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-2580"
               },
               "ruleId": "BDSA-2022-2580",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "CVE-2022-40152"
               },
               "ruleId": "CVE-2022-40152",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2022-0291"
               },
               "ruleId": "BDSA-2022-0291",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2603"
               },
               "ruleId": "BDSA-2021-2603",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2602"
               },
               "ruleId": "BDSA-2021-2602",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2593"
               },
               "ruleId": "BDSA-2021-2593",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2590"
               },
               "ruleId": "BDSA-2021-2590",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2587"
               },
               "ruleId": "BDSA-2021-2587",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2582"
               },
               "ruleId": "BDSA-2021-2582",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2580"
               },
               "ruleId": "BDSA-2021-2580",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2586"
               },
               "ruleId": "BDSA-2021-2586",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2581"
               },
               "ruleId": "BDSA-2021-2581",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2576"
               },
               "ruleId": "BDSA-2021-2576",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2565"
               },
               "ruleId": "BDSA-2021-2565",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2568"
               },
               "ruleId": "BDSA-2021-2568",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2573"
               },
               "ruleId": "BDSA-2021-2573",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-2569"
               },
               "ruleId": "BDSA-2021-2569",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-1626"
               },
               "ruleId": "BDSA-2021-1626",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0728"
               },
               "ruleId": "BDSA-2021-0728",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0735"
               },
               "ruleId": "BDSA-2021-0735",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0736"
               },
               "ruleId": "BDSA-2021-0736",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0732"
               },
               "ruleId": "BDSA-2021-0732",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0730"
               },
               "ruleId": "BDSA-2021-0730",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0726"
               },
               "ruleId": "BDSA-2021-0726",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0731"
               },
               "ruleId": "BDSA-2021-0731",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0737"
               },
               "ruleId": "BDSA-2021-0737",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0724"
               },
               "ruleId": "BDSA-2021-0724",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0722"
               },
               "ruleId": "BDSA-2021-0722",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2021-0721"
               },
               "ruleId": "BDSA-2021-0721",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-3780"
               },
               "ruleId": "BDSA-2020-3780",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-3787"
               },
               "ruleId": "BDSA-2020-3787",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2020-3372"
               },
               "ruleId": "BDSA-2020-3372",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "CVE-2019-10173"
               },
               "ruleId": "CVE-2019-10173",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2016-0027"
               },
               "ruleId": "BDSA-2016-0027",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            },
            {
               "message": {
                  "text": "BDSA-2017-0661"
               },
               "ruleId": "BDSA-2017-0661",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "file:///com.thoughtworks.xstream:xstream:1.4.7"
                        }
                     }
                  }
               ],
               "partialFingerprints": {
                  "primaryLocationLineHash": "com.thoughtworks.xstream:xstream:1.4.7"
               }
            }
         ],
         "tool": {
            "driver": {
               "name": "Synopsys Black Duck",
               "informationUri": "https://testing.blackduck.synopsys.com",
               "version": "0.1.4",
               "organization": "Synopsys",
               "rules": [
                  {
                     "id": "BDSA-2021-2085",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2085",
                     "shortDescription": {
                        "text": "BDSA-2021-2085: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.",
                        "markdown": "Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."
                     },
                     "help": {
                        "text": "Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.",
                        "markdown": "Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2083",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2083",
                     "shortDescription": {
                        "text": "BDSA-2021-2083: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\".",
                        "markdown": "Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."
                     },
                     "help": {
                        "text": "Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\".",
                        "markdown": "Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-2577",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-2577",
                     "shortDescription": {
                        "text": "BDSA-2020-2577: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.",
                        "markdown": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."
                     },
                     "help": {
                        "text": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.",
                        "markdown": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2012-0078",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2012-0078",
                     "shortDescription": {
                        "text": "BDSA-2012-0078: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task.",
                        "markdown": "Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."
                     },
                     "help": {
                        "text": "Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task.",
                        "markdown": "Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-1128",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-1128",
                     "shortDescription": {
                        "text": "BDSA-2020-1128: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.",
                        "markdown": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."
                     },
                     "help": {
                        "text": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.",
                        "markdown": "Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2018-1836",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2018-1836",
                     "shortDescription": {
                        "text": "BDSA-2018-1836: Apache Ant"
                     },
                     "fullDescription": {
                        "text": "Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system.",
                        "markdown": "Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."
                     },
                     "help": {
                        "text": "Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system.",
                        "markdown": "Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."
                     },
                     "properties": {
                        "category": "ant:ant-launcher:1.6.2",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-1516",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-1516",
                     "shortDescription": {
                        "text": "BDSA-2021-1516: Bouncy Castle"
                     },
                     "fullDescription": {
                        "text": "Bouncy Castle is vulnerable to information exposure due to the existence of a timing side channel. An attacker could recover private key information by performing cryptanalysis on ECDSA signature generation timing information.",
                        "markdown": "Bouncy Castle is vulnerable to information exposure due to the existence of a timing side channel. An attacker could recover private key information by performing cryptanalysis on ECDSA signature generation timing information."
                     },
                     "help": {
                        "text": "Bouncy Castle is vulnerable to information exposure due to the existence of a timing side channel. An attacker could recover private key information by performing cryptanalysis on ECDSA signature generation timing information.",
                        "markdown": "Bouncy Castle is vulnerable to information exposure due to the existence of a timing side channel. An attacker could recover private key information by performing cryptanalysis on ECDSA signature generation timing information."
                     },
                     "properties": {
                        "category": "org.bouncycastle:bcprov-jdk15on:1.56",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2018-5235",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2018-5235",
                     "shortDescription": {
                        "text": "BDSA-2018-5235: Bouncy Castle"
                     },
                     "fullDescription": {
                        "text": "Bouncy Castle contains a weak key-hash message authentication code (*HMAC*) that is only 16 bits long which can result in hash collisions. This is due to an error within the BKS version `1` keystore (*BKS-V1*) files and could lead to an attacker being able to affect the integrity of these files.\n\n**Note:** This issue issue occurs due to functionality that was re-introduced following the fix for **CVE-2018-5382** (**BDSA-2018-1190**).",
                        "markdown": "Bouncy Castle contains a weak key-hash message authentication code (*HMAC*) that is only 16 bits long which can result in hash collisions. This is due to an error within the BKS version `1` keystore (*BKS-V1*) files and could lead to an attacker being able to affect the integrity of these files.\n\n**Note:** This issue issue occurs due to functionality that was re-introduced following the fix for **CVE-2018-5382** (**BDSA-2018-1190**)."
                     },
                     "help": {
                        "text": "Bouncy Castle contains a weak key-hash message authentication code (*HMAC*) that is only 16 bits long which can result in hash collisions. This is due to an error within the BKS version `1` keystore (*BKS-V1*) files and could lead to an attacker being able to affect the integrity of these files.\n\n**Note:** This issue issue occurs due to functionality that was re-introduced following the fix for **CVE-2018-5382** (**BDSA-2018-1190**).",
                        "markdown": "Bouncy Castle contains a weak key-hash message authentication code (*HMAC*) that is only 16 bits long which can result in hash collisions. This is due to an error within the BKS version `1` keystore (*BKS-V1*) files and could lead to an attacker being able to affect the integrity of these files.\n\n**Note:** This issue issue occurs due to functionality that was re-introduced following the fix for **CVE-2018-5382** (**BDSA-2018-1190**)."
                     },
                     "properties": {
                        "category": "org.bouncycastle:bcprov-jdk15on:1.56",
                        "security-severity": "3.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "note"
                     }
                  },
                  {
                     "id": "BDSA-2020-3123",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-3123",
                     "shortDescription": {
                        "text": "BDSA-2020-3123: Bouncy Castle"
                     },
                     "fullDescription": {
                        "text": "Legion of the Bouncy Castle for Java is vulnerable to an information disclosure flaw in the way it handles error inputs. A remote attacker may be able to learn sensitive information about a RSA private key.",
                        "markdown": "Legion of the Bouncy Castle for Java is vulnerable to an information disclosure flaw in the way it handles error inputs. A remote attacker may be able to learn sensitive information about a RSA private key."
                     },
                     "help": {
                        "text": "Legion of the Bouncy Castle for Java is vulnerable to an information disclosure flaw in the way it handles error inputs. A remote attacker may be able to learn sensitive information about a RSA private key.",
                        "markdown": "Legion of the Bouncy Castle for Java is vulnerable to an information disclosure flaw in the way it handles error inputs. A remote attacker may be able to learn sensitive information about a RSA private key."
                     },
                     "properties": {
                        "category": "org.bouncycastle:bcprov-jdk15on:1.56",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2018-1843",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2018-1843",
                     "shortDescription": {
                        "text": "BDSA-2018-1843: Bouncy Castle"
                     },
                     "fullDescription": {
                        "text": "Bouncy Castle has a flaw in the way the BC/BCFIPS low-level API handles the specifications required to implement RSA key generation. An attacker can exploit this vulnerability to attack the RSA encryption used for key generation to obtain key pair combinations.",
                        "markdown": "Bouncy Castle has a flaw in the way the BC/BCFIPS low-level API handles the specifications required to implement RSA key generation. An attacker can exploit this vulnerability to attack the RSA encryption used for key generation to obtain key pair combinations."
                     },
                     "help": {
                        "text": "Bouncy Castle has a flaw in the way the BC/BCFIPS low-level API handles the specifications required to implement RSA key generation. An attacker can exploit this vulnerability to attack the RSA encryption used for key generation to obtain key pair combinations.",
                        "markdown": "Bouncy Castle has a flaw in the way the BC/BCFIPS low-level API handles the specifications required to implement RSA key generation. An attacker can exploit this vulnerability to attack the RSA encryption used for key generation to obtain key pair combinations."
                     },
                     "properties": {
                        "category": "org.bouncycastle:bcprov-jdk15on:1.56",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2017-2248",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2017-2248",
                     "shortDescription": {
                        "text": "BDSA-2017-2248: Bouncy Castle"
                     },
                     "fullDescription": {
                        "text": "The Bouncy Castle API is vulnerable to Bleichenbacher's RSA ciphertext attack, allowing the attacker to decipher RSA keys without knowing the secret key. While this vulnerability could have severe impact on the component's confidentiality, there are a number of requirements that make it difficult to execute.",
                        "markdown": "The Bouncy Castle API is vulnerable to Bleichenbacher's RSA ciphertext attack, allowing the attacker to decipher RSA keys without knowing the secret key. While this vulnerability could have severe impact on the component's confidentiality, there are a number of requirements that make it difficult to execute."
                     },
                     "help": {
                        "text": "The Bouncy Castle API is vulnerable to Bleichenbacher's RSA ciphertext attack, allowing the attacker to decipher RSA keys without knowing the secret key. While this vulnerability could have severe impact on the component's confidentiality, there are a number of requirements that make it difficult to execute.",
                        "markdown": "The Bouncy Castle API is vulnerable to Bleichenbacher's RSA ciphertext attack, allowing the attacker to decipher RSA keys without knowing the secret key. While this vulnerability could have severe impact on the component's confidentiality, there are a number of requirements that make it difficult to execute."
                     },
                     "properties": {
                        "category": "org.bouncycastle:bcprov-jdk15on:1.56",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2019-4386",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-4386",
                     "shortDescription": {
                        "text": "BDSA-2019-4386: dom4j: flexible XML framework for Java"
                     },
                     "fullDescription": {
                        "text": "Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system.",
                        "markdown": "Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."
                     },
                     "help": {
                        "text": "Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system.",
                        "markdown": "Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."
                     },
                     "properties": {
                        "category": "org.dom4j:dom4j:2.1.1",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-3410",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-3410",
                     "shortDescription": {
                        "text": "BDSA-2020-3410: Hibernate ORM"
                     },
                     "fullDescription": {
                        "text": "Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected.",
                        "markdown": "Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."
                     },
                     "help": {
                        "text": "Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected.",
                        "markdown": "Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."
                     },
                     "properties": {
                        "category": "org.hibernate:hibernate-core:5.4.6.Final",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-4479",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-4479",
                     "shortDescription": {
                        "text": "BDSA-2019-4479: Hibernate ORM"
                     },
                     "fullDescription": {
                        "text": "Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands.",
                        "markdown": "Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."
                     },
                     "help": {
                        "text": "Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands.",
                        "markdown": "Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."
                     },
                     "properties": {
                        "category": "org.hibernate:hibernate-core:5.4.6.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-4830",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-4830",
                     "shortDescription": {
                        "text": "BDSA-2021-4830: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application.",
                        "markdown": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."
                     },
                     "help": {
                        "text": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application.",
                        "markdown": "jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2768",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2768",
                     "shortDescription": {
                        "text": "BDSA-2022-2768: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.",
                        "markdown": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.",
                        "markdown": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2765",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2765",
                     "shortDescription": {
                        "text": "BDSA-2022-2765: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash.",
                        "markdown": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."
                     },
                     "help": {
                        "text": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash.",
                        "markdown": "Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-4752",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-4752",
                     "shortDescription": {
                        "text": "BDSA-2020-4752: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition.",
                        "markdown": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."
                     },
                     "help": {
                        "text": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition.",
                        "markdown": "jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-2965",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-2965",
                     "shortDescription": {
                        "text": "BDSA-2020-2965: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application.",
                        "markdown": "Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."
                     },
                     "help": {
                        "text": "Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application.",
                        "markdown": "Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-4213",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-4213",
                     "shortDescription": {
                        "text": "BDSA-2019-4213: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this Default Typing must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this Default Typing must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest."
                     },
                     "help": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this Default Typing must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this Default Typing must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-3215",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-3215",
                     "shortDescription": {
                        "text": "BDSA-2019-3215: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "Jackson-Databind is vulnerable to remote code execution (RCE) due to improper handling of polymorphic deserialization with the `apache-log4j-extras` gadget. An attacker could exploit this vulnerability by providing a malicious Java Naming and Directory Interface (JNDI) service to a vulnerable application which has this gadget on the classpath and has default typing enabled.",
                        "markdown": "Jackson-Databind is vulnerable to remote code execution (RCE) due to improper handling of polymorphic deserialization with the `apache-log4j-extras` gadget. An attacker could exploit this vulnerability by providing a malicious Java Naming and Directory Interface (JNDI) service to a vulnerable application which has this gadget on the classpath and has default typing enabled."
                     },
                     "help": {
                        "text": "Jackson-Databind is vulnerable to remote code execution (RCE) due to improper handling of polymorphic deserialization with the `apache-log4j-extras` gadget. An attacker could exploit this vulnerability by providing a malicious Java Naming and Directory Interface (JNDI) service to a vulnerable application which has this gadget on the classpath and has default typing enabled.",
                        "markdown": "Jackson-Databind is vulnerable to remote code execution (RCE) due to improper handling of polymorphic deserialization with the `apache-log4j-extras` gadget. An attacker could exploit this vulnerability by providing a malicious Java Naming and Directory Interface (JNDI) service to a vulnerable application which has this gadget on the classpath and has default typing enabled."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-3151",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-3151",
                     "shortDescription": {
                        "text": "BDSA-2019-3151: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. The target service must also have the `ehcache` JAR file in the class path, and the attacker must also be able to find a RMI service endpoint to access.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. The target service must also have the `ehcache` JAR file in the class path, and the attacker must also be able to find a RMI service endpoint to access."
                     },
                     "help": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. The target service must also have the `ehcache` JAR file in the class path, and the attacker must also be able to find a RMI service endpoint to access.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. The target service must also have the `ehcache` JAR file in the class path, and the attacker must also be able to find a RMI service endpoint to access."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-3135",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-3135",
                     "shortDescription": {
                        "text": "BDSA-2019-3135: jackson-databind"
                     },
                     "fullDescription": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. An attacker must also be able to find a RMI service endpoint to access.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. An attacker must also be able to find a RMI service endpoint to access."
                     },
                     "help": {
                        "text": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. An attacker must also be able to find a RMI service endpoint to access.",
                        "markdown": "FasterXML jackson-databind is vulnerable to remote code execution (RCE) due to how polymorphic data types are handled by a gadget used by the application. A remote attacker could execute arbitrary commands on the underlying system by submitting crafted JSON messages to the application. It should be noted that this 'Default Typing' must be enabled for an externally exposed JSON end-path in order for this vulnerability to manifest. An attacker must also be able to find a RMI service endpoint to access."
                     },
                     "properties": {
                        "category": "com.fasterxml.jackson.core:jackson-databind:2.10.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2110",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2110",
                     "shortDescription": {
                        "text": "BDSA-2021-2110: Jakarta Expression Language 3.0 Implementation"
                     },
                     "fullDescription": {
                        "text": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution.",
                        "markdown": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."
                     },
                     "help": {
                        "text": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution.",
                        "markdown": "Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."
                     },
                     "properties": {
                        "category": "org.glassfish:jakarta.el:3.0.3",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2013-0080",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2013-0080",
                     "shortDescription": {
                        "text": "BDSA-2013-0080: JSON for Ruby"
                     },
                     "fullDescription": {
                        "text": "The json gem bundled with Ruby is vulnerable to unsafe object creation due to improper parsing of JSON documents. This could allow an attacker to bypass security protections against creating internal objects in Ruby applications.\n\nNote that this issue exists due to an incomplete fix for CVE-2013-0269.",
                        "markdown": "The json gem bundled with Ruby is vulnerable to unsafe object creation due to improper parsing of JSON documents. This could allow an attacker to bypass security protections against creating internal objects in Ruby applications.\n\nNote that this issue exists due to an incomplete fix for CVE-2013-0269."
                     },
                     "help": {
                        "text": "The json gem bundled with Ruby is vulnerable to unsafe object creation due to improper parsing of JSON documents. This could allow an attacker to bypass security protections against creating internal objects in Ruby applications.\n\nNote that this issue exists due to an incomplete fix for CVE-2013-0269.",
                        "markdown": "The json gem bundled with Ruby is vulnerable to unsafe object creation due to improper parsing of JSON documents. This could allow an attacker to bypass security protections against creating internal objects in Ruby applications.\n\nNote that this issue exists due to an incomplete fix for CVE-2013-0269."
                     },
                     "properties": {
                        "category": "json/1.8.3",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-3818",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3818",
                     "shortDescription": {
                        "text": "BDSA-2021-3818: Logback"
                     },
                     "fullDescription": {
                        "text": "Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack.",
                        "markdown": "Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."
                     },
                     "help": {
                        "text": "Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack.",
                        "markdown": "Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."
                     },
                     "properties": {
                        "category": "ch.qos.logback:logback-classic:1.2.3",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-3401",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3401",
                     "shortDescription": {
                        "text": "BDSA-2021-3401: Logback"
                     },
                     "fullDescription": {
                        "text": "logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback.",
                        "markdown": "logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."
                     },
                     "help": {
                        "text": "logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback.",
                        "markdown": "logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."
                     },
                     "properties": {
                        "category": "ch.qos.logback:logback-classic:1.2.3",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-3347",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-3347",
                     "shortDescription": {
                        "text": "BDSA-2022-3347: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above.",
                        "markdown": "PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."
                     },
                     "help": {
                        "text": "PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above.",
                        "markdown": "PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "CVE-2022-41946",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-41946",
                     "shortDescription": {
                        "text": "CVE-2022-41946: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no ",
                        "markdown": "pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no "
                     },
                     "help": {
                        "text": "pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no ",
                        "markdown": "pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no "
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2702",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2702",
                     "shortDescription": {
                        "text": "BDSA-2022-2702: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column.",
                        "markdown": "The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."
                     },
                     "help": {
                        "text": "The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column.",
                        "markdown": "The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "CVE-2022-31197",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-31197",
                     "shortDescription": {
                        "text": "CVE-2022-31197: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be ",
                        "markdown": "PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be "
                     },
                     "help": {
                        "text": "PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be ",
                        "markdown": "PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be "
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-2080",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2080",
                     "shortDescription": {
                        "text": "BDSA-2022-2080: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application.",
                        "markdown": "pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."
                     },
                     "help": {
                        "text": "pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application.",
                        "markdown": "pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-1285",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1285",
                     "shortDescription": {
                        "text": "BDSA-2022-1285: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class.",
                        "markdown": "pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."
                     },
                     "help": {
                        "text": "pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class.",
                        "markdown": "pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2022-26520",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-26520",
                     "shortDescription": {
                        "text": "CVE-2022-26520: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "** DISPUTED ** In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor's position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties.",
                        "markdown": "** DISPUTED ** In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor's position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties."
                     },
                     "help": {
                        "text": "** DISPUTED ** In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor's position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties.",
                        "markdown": "** DISPUTED ** In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor's position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2022-21724",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-21724",
                     "shortDescription": {
                        "text": "CVE-2022-21724: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "pgjdbc is the offical PostgreSQL JDBC Driver. A security hole was found in the jdbc driver for postgresql database while doing security research. The system using the postgresql library will be attacked when attacker control the jdbc url or properties. pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This can lead to code execution loaded via arbitrary classes. Users using plugins are advised to upgrade. There are no known workarounds for this issue.",
                        "markdown": "pgjdbc is the offical PostgreSQL JDBC Driver. A security hole was found in the jdbc driver for postgresql database while doing security research. The system using the postgresql library will be attacked when attacker control the jdbc url or properties. pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This can lead to code execution loaded via arbitrary classes. Users using plugins are advised to upgrade. There are no known workarounds for this issue."
                     },
                     "help": {
                        "text": "pgjdbc is the offical PostgreSQL JDBC Driver. A security hole was found in the jdbc driver for postgresql database while doing security research. The system using the postgresql library will be attacked when attacker control the jdbc url or properties. pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This can lead to code execution loaded via arbitrary classes. Users using plugins are advised to upgrade. There are no known workarounds for this issue.",
                        "markdown": "pgjdbc is the offical PostgreSQL JDBC Driver. A security hole was found in the jdbc driver for postgresql database while doing security research. The system using the postgresql library will be attacked when attacker control the jdbc url or properties. pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This can lead to code execution loaded via arbitrary classes. Users using plugins are advised to upgrade. There are no known workarounds for this issue."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-1318",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-1318",
                     "shortDescription": {
                        "text": "BDSA-2020-1318: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning",
                        "markdown": "PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"
                     },
                     "help": {
                        "text": "PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning",
                        "markdown": "PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2020-13692",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2020-13692",
                     "shortDescription": {
                        "text": "CVE-2020-13692: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.",
                        "markdown": "PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE."
                     },
                     "help": {
                        "text": "PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.",
                        "markdown": "PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2018-2984",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2018-2984",
                     "shortDescription": {
                        "text": "BDSA-2018-2984: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "PostgreSQL-JDBC is vulnerable to a man-in-the-middle attack.  An attacker could exploit this vulnerability to masquerade as a trusted server, allowing them to intercept communications between the victim and actual trusted servers.",
                        "markdown": "PostgreSQL-JDBC is vulnerable to a man-in-the-middle attack.  An attacker could exploit this vulnerability to masquerade as a trusted server, allowing them to intercept communications between the victim and actual trusted servers."
                     },
                     "help": {
                        "text": "PostgreSQL-JDBC is vulnerable to a man-in-the-middle attack.  An attacker could exploit this vulnerability to masquerade as a trusted server, allowing them to intercept communications between the victim and actual trusted servers.",
                        "markdown": "PostgreSQL-JDBC is vulnerable to a man-in-the-middle attack.  An attacker could exploit this vulnerability to masquerade as a trusted server, allowing them to intercept communications between the victim and actual trusted servers."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2018-10936",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2018-10936",
                     "shortDescription": {
                        "text": "CVE-2018-10936: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "A weakness was found in postgresql-jdbc before version 42.2.5. It was possible to provide an SSL Factory and not check the host name if a host name verifier was not provided to the driver. This could lead to a condition where a man-in-the-middle attacker could masquerade as a trusted server by providing a certificate for the wrong host, as long as it was signed by a trusted CA.",
                        "markdown": "A weakness was found in postgresql-jdbc before version 42.2.5. It was possible to provide an SSL Factory and not check the host name if a host name verifier was not provided to the driver. This could lead to a condition where a man-in-the-middle attacker could masquerade as a trusted server by providing a certificate for the wrong host, as long as it was signed by a trusted CA."
                     },
                     "help": {
                        "text": "A weakness was found in postgresql-jdbc before version 42.2.5. It was possible to provide an SSL Factory and not check the host name if a host name verifier was not provided to the driver. This could lead to a condition where a man-in-the-middle attacker could masquerade as a trusted server by providing a certificate for the wrong host, as long as it was signed by a trusted CA.",
                        "markdown": "A weakness was found in postgresql-jdbc before version 42.2.5. It was possible to provide an SSL Factory and not check the host name if a host name verifier was not provided to the driver. This could lead to a condition where a man-in-the-middle attacker could masquerade as a trusted server by providing a certificate for the wrong host, as long as it was signed by a trusted CA."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2012-1618",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2012-1618",
                     "shortDescription": {
                        "text": "CVE-2012-1618: PostgreSQL JDBC Driver (pgjdbc)"
                     },
                     "fullDescription": {
                        "text": "Interaction error in the PostgreSQL JDBC driver before 8.2, when used with a PostgreSQL server with the \"standard_conforming_strings\" option enabled, such as the default configuration of PostgreSQL 9.1, does not properly escape unspecified JDBC statement parameters, which allows remote attackers to perform SQL injection attacks. NOTE: as of 20120330, it was claimed that the upstream developer planned to dispute this issue, but an official dispute has not been posted as of 20121005.",
                        "markdown": "Interaction error in the PostgreSQL JDBC driver before 8.2, when used with a PostgreSQL server with the \"standard_conforming_strings\" option enabled, such as the default configuration of PostgreSQL 9.1, does not properly escape unspecified JDBC statement parameters, which allows remote attackers to perform SQL injection attacks. NOTE: as of 20120330, it was claimed that the upstream developer planned to dispute this issue, but an official dispute has not been posted as of 20121005."
                     },
                     "help": {
                        "text": "Interaction error in the PostgreSQL JDBC driver before 8.2, when used with a PostgreSQL server with the \"standard_conforming_strings\" option enabled, such as the default configuration of PostgreSQL 9.1, does not properly escape unspecified JDBC statement parameters, which allows remote attackers to perform SQL injection attacks. NOTE: as of 20120330, it was claimed that the upstream developer planned to dispute this issue, but an official dispute has not been posted as of 20121005.",
                        "markdown": "Interaction error in the PostgreSQL JDBC driver before 8.2, when used with a PostgreSQL server with the \"standard_conforming_strings\" option enabled, such as the default configuration of PostgreSQL 9.1, does not properly escape unspecified JDBC statement parameters, which allows remote attackers to perform SQL injection attacks. NOTE: as of 20120330, it was claimed that the upstream developer planned to dispute this issue, but an official dispute has not been posted as of 20121005."
                     },
                     "properties": {
                        "category": "PostgreSQL_JDBC_Driver_(pgjdbc)",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-2776",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-2776",
                     "shortDescription": {
                        "text": "BDSA-2019-2776: Rake"
                     },
                     "fullDescription": {
                        "text": "Rake gem for Ruby contains a OS command injection vulnerability.  This allows an attacker to use a crafted file to execute commands.  If an attacker has access to a local file system running Ruby, or can trick a victim into downloading a file, it may be possible to use the filename to inject OS commands into the system.",
                        "markdown": "Rake gem for Ruby contains a OS command injection vulnerability.  This allows an attacker to use a crafted file to execute commands.  If an attacker has access to a local file system running Ruby, or can trick a victim into downloading a file, it may be possible to use the filename to inject OS commands into the system."
                     },
                     "help": {
                        "text": "Rake gem for Ruby contains a OS command injection vulnerability.  This allows an attacker to use a crafted file to execute commands.  If an attacker has access to a local file system running Ruby, or can trick a victim into downloading a file, it may be possible to use the filename to inject OS commands into the system.",
                        "markdown": "Rake gem for Ruby contains a OS command injection vulnerability.  This allows an attacker to use a crafted file to execute commands.  If an attacker has access to a local file system running Ruby, or can trick a victim into downloading a file, it may be possible to use the filename to inject OS commands into the system."
                     },
                     "properties": {
                        "category": "rake/10.4.2",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2545",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2545",
                     "shortDescription": {
                        "text": "BDSA-2021-2545: RDoc"
                     },
                     "fullDescription": {
                        "text": "RDoc contains a vulnerability to OS command injection. Attackers that successfully exploit this vulnerability could execute arbitrary code.",
                        "markdown": "RDoc contains a vulnerability to OS command injection. Attackers that successfully exploit this vulnerability could execute arbitrary code."
                     },
                     "help": {
                        "text": "RDoc contains a vulnerability to OS command injection. Attackers that successfully exploit this vulnerability could execute arbitrary code.",
                        "markdown": "RDoc contains a vulnerability to OS command injection. Attackers that successfully exploit this vulnerability could execute arbitrary code."
                     },
                     "properties": {
                        "category": "rdoc/4.2.0",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-3447",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-3447",
                     "shortDescription": {
                        "text": "BDSA-2022-3447: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system.",
                        "markdown": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system.",
                        "markdown": "SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-3211",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-3211",
                     "shortDescription": {
                        "text": "BDSA-2022-3211: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file.",
                        "markdown": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."
                     },
                     "help": {
                        "text": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file.",
                        "markdown": "Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2590",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2590",
                     "shortDescription": {
                        "text": "BDSA-2022-2590: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2587",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2587",
                     "shortDescription": {
                        "text": "BDSA-2022-2587: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2579",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2579",
                     "shortDescription": {
                        "text": "BDSA-2022-2579: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2578",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2578",
                     "shortDescription": {
                        "text": "BDSA-2022-2578: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2577",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2577",
                     "shortDescription": {
                        "text": "BDSA-2022-2577: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response.",
                        "markdown": "SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20&%20NIST.md) in response."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2017-3947",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2017-3947",
                     "shortDescription": {
                        "text": "BDSA-2017-3947: SnakeYAML"
                     },
                     "fullDescription": {
                        "text": "SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS).",
                        "markdown": "SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."
                     },
                     "help": {
                        "text": "SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS).",
                        "markdown": "SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."
                     },
                     "properties": {
                        "category": "org.yaml:snakeyaml:1.18",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-0856",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0856",
                     "shortDescription": {
                        "text": "BDSA-2022-0856: Spring Boot"
                     },
                     "fullDescription": {
                        "text": "Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.",
                        "markdown": "Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."
                     },
                     "help": {
                        "text": "Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.",
                        "markdown": "Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."
                     },
                     "properties": {
                        "category": "org.springframework.boot:spring-boot:2.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-0858",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0858",
                     "shortDescription": {
                        "text": "BDSA-2022-0858: Spring Boot"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).",
                        "markdown": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).",
                        "markdown": "Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                     },
                     "properties": {
                        "category": "org.springframework.boot:spring-boot:2.2.0.RELEASE",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-3887",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3887",
                     "shortDescription": {
                        "text": "BDSA-2021-3887: Spring Boot"
                     },
                     "fullDescription": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.",
                        "markdown": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                     },
                     "help": {
                        "text": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.",
                        "markdown": "Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."
                     },
                     "properties": {
                        "category": "org.springframework.boot:spring-boot:2.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-3817",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3817",
                     "shortDescription": {
                        "text": "BDSA-2021-3817: Spring Boot"
                     },
                     "fullDescription": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.",
                        "markdown": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                     },
                     "help": {
                        "text": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.",
                        "markdown": "Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."
                     },
                     "properties": {
                        "category": "org.springframework.boot:spring-boot:2.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-3731",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3731",
                     "shortDescription": {
                        "text": "BDSA-2021-3731: Spring Boot"
                     },
                     "fullDescription": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) com",
                        "markdown": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) com"
                     },
                     "help": {
                        "text": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) com",
                        "markdown": "Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) com"
                     },
                     "properties": {
                        "category": "org.springframework.boot:spring-boot:2.2.0.RELEASE",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2023-0638",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2023-0638",
                     "shortDescription": {
                        "text": "BDSA-2023-0638: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-1330",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1330",
                     "shortDescription": {
                        "text": "BDSA-2022-1330: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-1329",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1329",
                     "shortDescription": {
                        "text": "BDSA-2022-1329: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.",
                        "markdown": "Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-1040",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1040",
                     "shortDescription": {
                        "text": "BDSA-2022-1040: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.",
                        "markdown": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.",
                        "markdown": "Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "3.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "note"
                     }
                  },
                  {
                     "id": "BDSA-2022-0847",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0847",
                     "shortDescription": {
                        "text": "BDSA-2022-0847: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.",
                        "markdown": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                     },
                     "help": {
                        "text": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.",
                        "markdown": "Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-0820",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0820",
                     "shortDescription": {
                        "text": "BDSA-2022-0820: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.",
                        "markdown": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                     },
                     "help": {
                        "text": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.",
                        "markdown": "Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-0011",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0011",
                     "shortDescription": {
                        "text": "BDSA-2022-0011: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.",
                        "markdown": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.",
                        "markdown": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-3236",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3236",
                     "shortDescription": {
                        "text": "BDSA-2021-3236: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.",
                        "markdown": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.",
                        "markdown": "Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-1588",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-1588",
                     "shortDescription": {
                        "text": "BDSA-2021-1588: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.",
                        "markdown": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.",
                        "markdown": "Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "CVE-2020-5421",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2020-5421",
                     "shortDescription": {
                        "text": "CVE-2020-5421: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.",
                        "markdown": "In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter."
                     },
                     "help": {
                        "text": "In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.",
                        "markdown": "In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-0070",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-0070",
                     "shortDescription": {
                        "text": "BDSA-2020-0070: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.",
                        "markdown": "Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.",
                        "markdown": "Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-0069",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-0069",
                     "shortDescription": {
                        "text": "BDSA-2020-0069: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.",
                        "markdown": "Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."
                     },
                     "help": {
                        "text": "Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.",
                        "markdown": "Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2016-1000027",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2016-1000027",
                     "shortDescription": {
                        "text": "CVE-2016-1000027: Spring Framework"
                     },
                     "fullDescription": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
                        "markdown": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                     },
                     "help": {
                        "text": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
                        "markdown": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data."
                     },
                     "properties": {
                        "category": "org.springframework:spring-expression:5.2.0.RELEASE",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-3109",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-3109",
                     "shortDescription": {
                        "text": "BDSA-2022-3109: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.",
                        "markdown": "Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."
                     },
                     "help": {
                        "text": "Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.",
                        "markdown": "Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-1369",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1369",
                     "shortDescription": {
                        "text": "BDSA-2022-1369: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.",
                        "markdown": "Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."
                     },
                     "help": {
                        "text": "Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.",
                        "markdown": "Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-1370",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-1370",
                     "shortDescription": {
                        "text": "BDSA-2022-1370: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.",
                        "markdown": "Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."
                     },
                     "help": {
                        "text": "Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.",
                        "markdown": "Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2310",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2310",
                     "shortDescription": {
                        "text": "BDSA-2021-2310: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.",
                        "markdown": "Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."
                     },
                     "help": {
                        "text": "Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.",
                        "markdown": "Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-0417",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0417",
                     "shortDescription": {
                        "text": "BDSA-2021-0417: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.",
                        "markdown": "Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."
                     },
                     "help": {
                        "text": "Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.",
                        "markdown": "Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-1094",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-1094",
                     "shortDescription": {
                        "text": "BDSA-2020-1094: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.",
                        "markdown": "Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."
                     },
                     "help": {
                        "text": "Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.",
                        "markdown": "Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-1092",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-1092",
                     "shortDescription": {
                        "text": "BDSA-2020-1092: Spring Security"
                     },
                     "fullDescription": {
                        "text": "Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.",
                        "markdown": "Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."
                     },
                     "help": {
                        "text": "Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.",
                        "markdown": "Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."
                     },
                     "properties": {
                        "category": "org.springframework.security:spring-security-core:5.2.0.RELEASE",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-4619",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-4619",
                     "shortDescription": {
                        "text": "BDSA-2021-4619: thymeleaf-spring5"
                     },
                     "fullDescription": {
                        "text": "thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n> Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered \u2014 which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection.",
                        "markdown": "thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n> Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered \u2014 which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."
                     },
                     "help": {
                        "text": "thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n> Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered \u2014 which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection.",
                        "markdown": "thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n> Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered \u2014 which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."
                     },
                     "properties": {
                        "category": "org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-4041",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-4041",
                     "shortDescription": {
                        "text": "BDSA-2022-4041: undertow"
                     },
                     "fullDescription": {
                        "text": "The Undertow client does not check the server identity presented by the server certificate in HTTPS connections. It accepts certificates with arbitrary subjects.",
                        "markdown": "The Undertow client does not check the server identity presented by the server certificate in HTTPS connections. It accepts certificates with arbitrary subjects."
                     },
                     "help": {
                        "text": "The Undertow client does not check the server identity presented by the server certificate in HTTPS connections. It accepts certificates with arbitrary subjects.",
                        "markdown": "The Undertow client does not check the server identity presented by the server certificate in HTTPS connections. It accepts certificates with arbitrary subjects."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2023-0526",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2023-0526",
                     "shortDescription": {
                        "text": "BDSA-2023-0526: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS).",
                        "markdown": "Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS).",
                        "markdown": "Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2482",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2482",
                     "shortDescription": {
                        "text": "BDSA-2022-2482: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash.",
                        "markdown": "Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."
                     },
                     "help": {
                        "text": "Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash.",
                        "markdown": "Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "3.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "note"
                     }
                  },
                  {
                     "id": "CVE-2022-1319",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-1319",
                     "shortDescription": {
                        "text": "CVE-2022-1319: undertow"
                     },
                     "fullDescription": {
                        "text": "A flaw was found in Undertow. For an AJP 400 response, EAP 7 is improperly sending two response packets, and those packets have the reuse flag set even though JBoss EAP closes the connection. A failure occurs when the connection is reused after a 400 by CPING since it reads in the second SEND_HEADERS response packet instead of a CPONG.",
                        "markdown": "A flaw was found in Undertow. For an AJP 400 response, EAP 7 is improperly sending two response packets, and those packets have the reuse flag set even though JBoss EAP closes the connection. A failure occurs when the connection is reused after a 400 by CPING since it reads in the second SEND_HEADERS response packet instead of a CPONG."
                     },
                     "help": {
                        "text": "A flaw was found in Undertow. For an AJP 400 response, EAP 7 is improperly sending two response packets, and those packets have the reuse flag set even though JBoss EAP closes the connection. A failure occurs when the connection is reused after a 400 by CPING since it reads in the second SEND_HEADERS response packet instead of a CPONG.",
                        "markdown": "A flaw was found in Undertow. For an AJP 400 response, EAP 7 is improperly sending two response packets, and those packets have the reuse flag set even though JBoss EAP closes the connection. A failure occurs when the connection is reused after a 400 by CPING since it reads in the second SEND_HEADERS response packet instead of a CPONG."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-2100",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2100",
                     "shortDescription": {
                        "text": "BDSA-2022-2100: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"
                     },
                     "help": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2085",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2085",
                     "shortDescription": {
                        "text": "BDSA-2022-2085: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS).",
                        "markdown": "Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS).",
                        "markdown": "Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "3.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "note"
                     }
                  },
                  {
                     "id": "BDSA-2022-0318",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0318",
                     "shortDescription": {
                        "text": "BDSA-2022-0318: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS).",
                        "markdown": "Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."
                     },
                     "help": {
                        "text": "Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS).",
                        "markdown": "Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-3463",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-3463",
                     "shortDescription": {
                        "text": "BDSA-2021-3463: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2789",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2789",
                     "shortDescription": {
                        "text": "BDSA-2021-2789: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition.",
                        "markdown": "Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."
                     },
                     "help": {
                        "text": "Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition.",
                        "markdown": "Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2615",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2615",
                     "shortDescription": {
                        "text": "BDSA-2021-2615: undertow"
                     },
                     "fullDescription": {
                        "text": "undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests.",
                        "markdown": "undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."
                     },
                     "help": {
                        "text": "undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests.",
                        "markdown": "undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-0444",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0444",
                     "shortDescription": {
                        "text": "BDSA-2021-0444: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.",
                        "markdown": "Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.",
                        "markdown": "Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0208",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0208",
                     "shortDescription": {
                        "text": "BDSA-2021-0208: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-2102",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-2102",
                     "shortDescription": {
                        "text": "BDSA-2020-2102: undertow"
                     },
                     "fullDescription": {
                        "text": "It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.",
                        "markdown": "It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."
                     },
                     "help": {
                        "text": "It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.",
                        "markdown": "It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2019-4367",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2019-4367",
                     "shortDescription": {
                        "text": "BDSA-2019-4367: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks.",
                        "markdown": "Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks.",
                        "markdown": "Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "CVE-2020-10719",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2020-10719",
                     "shortDescription": {
                        "text": "CVE-2020-10719: undertow"
                     },
                     "fullDescription": {
                        "text": "A flaw was found in Undertow in versions before 2.1.1.Final, regarding the processing of invalid HTTP requests with large chunk sizes. This flaw allows an attacker to take advantage of HTTP request smuggling.",
                        "markdown": "A flaw was found in Undertow in versions before 2.1.1.Final, regarding the processing of invalid HTTP requests with large chunk sizes. This flaw allows an attacker to take advantage of HTTP request smuggling."
                     },
                     "help": {
                        "text": "A flaw was found in Undertow in versions before 2.1.1.Final, regarding the processing of invalid HTTP requests with large chunk sizes. This flaw allows an attacker to take advantage of HTTP request smuggling.",
                        "markdown": "A flaw was found in Undertow in versions before 2.1.1.Final, regarding the processing of invalid HTTP requests with large chunk sizes. This flaw allows an attacker to take advantage of HTTP request smuggling."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-1151",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-1151",
                     "shortDescription": {
                        "text": "BDSA-2020-1151: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2020-0483",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-0483",
                     "shortDescription": {
                        "text": "BDSA-2020-0483: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE).",
                        "markdown": "Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE).",
                        "markdown": "Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-0115",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-0115",
                     "shortDescription": {
                        "text": "BDSA-2020-0115: undertow"
                     },
                     "fullDescription": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."
                     },
                     "help": {
                        "text": "Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port.",
                        "markdown": "Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."
                     },
                     "properties": {
                        "category": "io.undertow:undertow-core:2.0.27.Final",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-3693",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-3693",
                     "shortDescription": {
                        "text": "BDSA-2022-3693: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream.",
                        "markdown": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."
                     },
                     "help": {
                        "text": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream.",
                        "markdown": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2022-2580",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-2580",
                     "shortDescription": {
                        "text": "BDSA-2022-2580: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash.",
                        "markdown": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."
                     },
                     "help": {
                        "text": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash.",
                        "markdown": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "CVE-2022-40152",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2022-40152",
                     "shortDescription": {
                        "text": "CVE-2022-40152: XStream"
                     },
                     "fullDescription": {
                        "text": "Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",
                        "markdown": "Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack."
                     },
                     "help": {
                        "text": "Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",
                        "markdown": "Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2022-0291",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2022-0291",
                     "shortDescription": {
                        "text": "BDSA-2022-0291: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.",
                        "markdown": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."
                     },
                     "help": {
                        "text": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.",
                        "markdown": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2603",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2603",
                     "shortDescription": {
                        "text": "BDSA-2021-2603: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2602",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2602",
                     "shortDescription": {
                        "text": "BDSA-2021-2602: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2593",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2593",
                     "shortDescription": {
                        "text": "BDSA-2021-2593: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2590",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2590",
                     "shortDescription": {
                        "text": "BDSA-2021-2590: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2587",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2587",
                     "shortDescription": {
                        "text": "BDSA-2021-2587: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2582",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2582",
                     "shortDescription": {
                        "text": "BDSA-2021-2582: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-2580",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2580",
                     "shortDescription": {
                        "text": "BDSA-2021-2580: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2586",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2586",
                     "shortDescription": {
                        "text": "BDSA-2021-2586: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2581",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2581",
                     "shortDescription": {
                        "text": "BDSA-2021-2581: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2576",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2576",
                     "shortDescription": {
                        "text": "BDSA-2021-2576: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2565",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2565",
                     "shortDescription": {
                        "text": "BDSA-2021-2565: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2568",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2568",
                     "shortDescription": {
                        "text": "BDSA-2021-2568: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "help": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.",
                        "markdown": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2573",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2573",
                     "shortDescription": {
                        "text": "BDSA-2021-2573: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "help": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-2569",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-2569",
                     "shortDescription": {
                        "text": "BDSA-2021-2569: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                     },
                     "help": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).",
                        "markdown": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-1626",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-1626",
                     "shortDescription": {
                        "text": "BDSA-2021-1626: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0728",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0728",
                     "shortDescription": {
                        "text": "BDSA-2021-0728: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0735",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0735",
                     "shortDescription": {
                        "text": "BDSA-2021-0735: XStream"
                     },
                     "fullDescription": {
                        "text": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service.",
                        "markdown": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."
                     },
                     "help": {
                        "text": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service.",
                        "markdown": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-0736",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0736",
                     "shortDescription": {
                        "text": "BDSA-2021-0736: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0732",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0732",
                     "shortDescription": {
                        "text": "BDSA-2021-0732: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-0730",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0730",
                     "shortDescription": {
                        "text": "BDSA-2021-0730: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0726",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0726",
                     "shortDescription": {
                        "text": "BDSA-2021-0726: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0731",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0731",
                     "shortDescription": {
                        "text": "BDSA-2021-0731: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."
                     },
                     "help": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on.",
                        "markdown": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0737",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0737",
                     "shortDescription": {
                        "text": "BDSA-2021-0737: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  },
                  {
                     "id": "BDSA-2021-0724",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0724",
                     "shortDescription": {
                        "text": "BDSA-2021-0724: XStream"
                     },
                     "fullDescription": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                     },
                     "help": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0722",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0722",
                     "shortDescription": {
                        "text": "BDSA-2021-0722: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "help": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.",
                        "markdown": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2021-0721",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2021-0721",
                     "shortDescription": {
                        "text": "BDSA-2021-0721: XStream"
                     },
                     "fullDescription": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                     },
                     "help": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-3780",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-3780",
                     "shortDescription": {
                        "text": "BDSA-2020-3780: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation.",
                        "markdown": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."
                     },
                     "help": {
                        "text": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation.",
                        "markdown": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-3787",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-3787",
                     "shortDescription": {
                        "text": "BDSA-2020-3787: XStream"
                     },
                     "fullDescription": {
                        "text": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network.",
                        "markdown": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."
                     },
                     "help": {
                        "text": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network.",
                        "markdown": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2020-3372",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2020-3372",
                     "shortDescription": {
                        "text": "BDSA-2020-3372: XStream"
                     },
                     "fullDescription": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."
                     },
                     "help": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method.",
                        "markdown": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "CVE-2019-10173",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/CVE-2019-10173",
                     "shortDescription": {
                        "text": "CVE-2019-10173: XStream"
                     },
                     "fullDescription": {
                        "text": "It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)",
                        "markdown": "It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)"
                     },
                     "help": {
                        "text": "It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)",
                        "markdown": "It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)"
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "9.1",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2016-0027",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2016-0027",
                     "shortDescription": {
                        "text": "BDSA-2016-0027: XStream"
                     },
                     "fullDescription": {
                        "text": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities.",
                        "markdown": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."
                     },
                     "help": {
                        "text": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities.",
                        "markdown": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "8.9",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "error"
                     }
                  },
                  {
                     "id": "BDSA-2017-0661",
                     "helpUri": "https://testing.blackduck.synopsys.com/api/vulnerabilities/BDSA-2017-0661",
                     "shortDescription": {
                        "text": "BDSA-2017-0661: XStream"
                     },
                     "fullDescription": {
                        "text": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data.",
                        "markdown": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."
                     },
                     "help": {
                        "text": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data.",
                        "markdown": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."
                     },
                     "properties": {
                        "category": "com.thoughtworks.xstream:xstream:1.4.7",
                        "security-severity": "6.8",
                        "tags": [
                           "security"
                        ]
                     },
                     "defaultConfiguration": {
                        "level": "warning"
                     }
                  }
               ]
            }
         }
      }
   ]
}